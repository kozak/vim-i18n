#!/usr/bin/env ruby
# vim: ft=ruby:

require "yaml"
require 'json'

class Hash
  def sort_by_key(recursive=false, &block)
    self.keys.sort(&block).reduce({}) do |seed, key|
      seed[key] = self[key]
      if recursive && seed[key].is_a?(Hash)
        seed[key] = seed[key].sort_by_key(true, &block)
      end
      seed
    end
  end
end

class YamlReader
  def call(data)
    YAML.load(data)
  end
end

class YamlWriter
  attr_reader :data

  def initialize(data)
    @data = data
  end

  def preamble
    data[/\A(\s*(#.*?)?\n)+/]
  end

  def call(hash)
    [preamble, hash.to_yaml].join
  end
end

class JsonLoader
  def call(data)
    JSON.parse(data)
  end
end

class JsonWriter
  def call(hash)
    JSON.generate(hash)
  end
end

class AddKey
  attr_reader :hash
  attr_reader :data
  attr_reader :writer

  def initialize(data, reader, writer)
    @data = data
    @writer = writer
    @hash = reader.call(data)
  end

  def to_s
    sorted_hash = hash.sort_by_key(true) { |x, y| x.to_s <=> y.to_s }
    writer.call(sorted_hash)
  end

  def []=(key, value)
    chain = key.split('.')
    current_hash = hash
    chain.each_with_index do |part, index|
      is_last = index == chain.length - 1
      key_this_far = chain[0..index].join('.')

      case current_hash[part]
      when Hash
        raise("trying to add a string to a hash key in use: #{key_this_far.inspect}") if is_last
      when String
        raise("trying to add to a string key in use: #{key_this_far.inspect}")
      else
        current_hash[part] = is_last ? value : {}
      end
      current_hash = current_hash[part]
    end
    value
  end

  private

  def preamble
    data[/\A(\s*(#.*?)?\n)+/]
  end
end

file = ARGV[0]
key = ARGV[1]
value = ARGV[2]

is_json = File.extname(file) == "json"
locale = File.basename(file, ".yml")[/[^\.]+$/]
file = File.expand_path(file)
file_content = File.exists?(file) ? File.read(file) : "#{locale}:"

if is_json
  reader = JsonReader.new
  writer = JsonWriter.new
else
  reader = YamlReader.new
  writer = YamlWriter.new(file_content)
end

add_key = AddKey.new(file_content, reader, writer)
add_key[add_key.hash.keys.first + "." + key] = value

File.open(file, 'w') { |f| f.write add_key.to_s }

